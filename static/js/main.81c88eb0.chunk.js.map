{"version":3,"sources":["logo.svg","pages.js","1F_9X9/index.js","3F_Calculator/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","react_default","a","createElement","className","MultiplicationChart","a2","a3","a4","a5","a6","a7","a8","a9","i","x","push","slice","Calculator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","equalClick","Cal","toStr","state","answerArray","filter","value","join","toInt","parseInt","setState","partB","ans","ansString","comma","A","partA","B","newArray","symbol","toString","console","log","calculate","length","toThousands","addClick","subtractClick","multiplication","division","clear","calculationArray","answer","dot","delete","last","del","splice","_this2","onClick","numberClick","n","Component","num","result","counter","split","unshift","App","Route","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","HashRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.81c88eb0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nconst Home = () => {\r\n    return <h1 className=\"py-3\">Home</h1>;\r\n};\r\n// const Books = () => {\r\n//     return <h1 className=\"py-3\">Books</h1>;\r\n// };\r\nexport { Home};","import React from 'react';\r\nimport './style.css';\r\n\r\nconst MultiplicationChart = () => {\r\n    let a =[];\r\n    let a2 , a3 ,a4, a5, a6, a7, a8, a9;\r\n    for(let i=2;i<=9;i++){\r\n        let x = i;\r\n        for(let i=1;i<=9;i++){\r\n            a.push(<p className=\"one\">{x} X {i} = {x*i}</p>)\r\n        }\r\n        \r\n    }\r\n    a2=a.slice(0,9);\r\n    a3=a.slice(9,18);\r\n    a4=a.slice(18,27);\r\n    a5=a.slice(27,36);\r\n    a6=a.slice(36,45);\r\n    a7=a.slice(45,54);\r\n    a8=a.slice(54,63);\r\n    a9=a.slice(63,72);\r\n\r\n    return (\r\n        <div className=\"wrap\">\r\n            <div className=\"content\">\r\n                <div className=\"title\">\r\n                    <div className=\"x-top\">×</div>\r\n                    <hr className=\"line-top\"/>\r\n                    <div className=\"x-top\">×</div>\r\n                    <h1 className=\"title-cn\">九九乘法表</h1>\r\n                    <h1 className=\"title-en\">Multiplication Chart</h1>\r\n                    <div className=\"x-btm\">×</div>\r\n                    <hr className=\"line-btm\"/>\r\n                    <div className=\"x-btm\">×</div>\r\n                </div>\r\n                <div className=\"chart\">\r\n                    <h2 className=\"number\">2</h2>\r\n                    {a2}\r\n                </div>\r\n                <div className=\"chart\">\r\n                <h2 className=\"number\">3</h2>\r\n                    {a3}\r\n                </div>\r\n                <div className=\"chart\">\r\n                    <h2 className=\"number\">4</h2>\r\n                    {a4}\r\n                </div>\r\n                <div className=\"chart\">\r\n                    <h2 className=\"number\">5</h2>\r\n                    {a5}\r\n                </div>\r\n                <div className=\"chart\">\r\n                    <h2 className=\"number\">6</h2>\r\n                    {a6}\r\n                </div>\r\n                <div className=\"chart\">\r\n                    <h2 className=\"number\">7</h2>\r\n                    {a7}\r\n                </div>\r\n                <div className=\"chart\">\r\n                    <h2 className=\"number\">8</h2>\r\n                    {a8}\r\n                </div>\r\n                <div className=\"chart\">\r\n                    <h2 className=\"number\">9</h2>\r\n                        {a9}\r\n                </div>\r\n               \r\n               \r\n            </div>\r\n            <div className=\"footer\">Copyright © 2019 HexSchool. All rights reserved.</div>\r\n        </div>\r\n    );\r\n};\r\nexport { MultiplicationChart};","import React, { Component } from 'react';\r\nimport './style.css';\r\n\r\n\r\nclass Calculator extends Component{\r\n    constructor(props){\r\n      super(props);\r\n      this.state={\r\n        answerArray:[\"0\"],\r\n        calculationArray:[],\r\n        partA: null, //String\r\n        partB: null, //String\r\n        answer: 0,\r\n        symbol: 0, //  0 => null , 1 => + , 2 => - , 3 => X , 4 => 5 => =\r\n        calculate: false,\r\n        dot: false,\r\n      };\r\n    }\r\n    \r\n   \r\n    render(){\r\n        console.log(this.state.partA,this.state.partB,this.state.symbol,this.state.calculate)\r\n        return (\r\n            <div className=\"wrap\">\r\n                <div className=\"calculator\">\r\n                    <div className=\"header\">\r\n                        <div className=\"expression\"></div>\r\n                        <div className=\"result\">{this.state.answerArray}</div>\r\n                    </div>\r\n                    <div className=\"body\">\r\n                        <div className=\"number \" onClick={ () => this.numberClick(7)}>7</div>\r\n                        <div className=\"number \" onClick={ () => this.numberClick(8)}>8</div>\r\n                        <div className=\"number \" onClick={ () => this.numberClick(9)}>9</div>\r\n                        <div className=\"operator \" onClick={ this.division}>÷</div>\r\n                        <div className=\"number \" onClick={ () => this.numberClick(4)}>4</div>\r\n                        <div className=\"number \" onClick={ () => this.numberClick(5)}>5</div>\r\n                        <div className=\"number \" onClick={ () => this.numberClick(6)}>6</div>\r\n                        <div className=\"operator \" onClick={this.multiplication}>×</div>\r\n                        <div className=\"number\" onClick={ () => this.numberClick(1)}>1</div>\r\n                        <div className=\"number\" onClick={ () => this.numberClick(2)}>2</div>\r\n                        <div className=\"number\" onClick={ () => this.numberClick(3)}>3</div>\r\n                        <div className=\"operator\" onClick={this.addClick }>+</div>\r\n                        <div className=\"number\" onClick={ () => this.numberClick(0)}>0</div>\r\n                        <div className=\"number\">00</div>\r\n                        <div className=\"number\">.</div>\r\n                        <div className=\"operator\" onClick={this.subtractClick}>-</div>\r\n                        <div className=\"all-clear\" onClick={this.clear}>AC</div>\r\n                        <div className=\"backspace\" onClick={this.delete}>⌫</div>\r\n                        <div className=\"equal\"onClick={() => this.equalClick(5)}>=</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n\r\n    //數字 click\r\n    numberClick(n){\r\n        \r\n        if(this.state.calculate === false && this.state.dot === false){\r\n            //判斷第一個數字是否為 0 如果為 0 直接更新為 click 的值, 如果不是就新增數值\r\n            if(this.state.answerArray[0] === '0'){\r\n                this.setState({answerArray:[n],});\r\n            }else{\r\n                //找出沒有逗號的陣列\r\n                let clear = this.state.answerArray.filter((value) => {\r\n                    return value !== ',';\r\n                })\r\n                //放入 click 的值\r\n                clear.push(n);\r\n                //加入逗號\r\n                let comma = toThousands(clear.join(''));\r\n\r\n                this.setState({\r\n                    answerArray: comma,\r\n                });\r\n\r\n\r\n            }\r\n        }else{\r\n            this.setState({\r\n                calculate: false,\r\n                answerArray:[n],\r\n            })\r\n            \r\n            \r\n\r\n        }\r\n\r\n    \r\n    }\r\n\r\n    // = 號 click\r\n    equalClick = (Cal) =>{\r\n\r\n\r\n        let calculation = () =>{\r\n            //將 partA/B 從字串轉成數值\r\n            let A = parseInt(this.state.partA);\r\n            let B = parseInt(this.state.partB);\r\n            let ans, ansString;\r\n            let newArray = [];\r\n            let comma;\r\n            //判斷運算值\r\n            switch(this.state.symbol) {\r\n                \r\n                case 1:\r\n                    \r\n                    ans = A + B; //要給 partA 做下次計算\r\n                    ansString = ans.toString();\r\n                    console.log(this.state.partA,this.state.partB,this.state.symbol,this.state.calculate)\r\n                    //將算出的數字給到一個新的陣列\r\n                    \r\n                    for (let i = 0; i < ansString.length; i++) {\r\n                        newArray.push(ansString.slice(i, i + 1));\r\n                    }\r\n                    comma = toThousands(newArray.join(''))\r\n                  \r\n                    this.setState({\r\n                        answerArray: comma,\r\n                        symbol: Cal,\r\n                        partA: ans,\r\n                        \r\n                    });\r\n                    break;\r\n\r\n                case 2:\r\n                    ans = A - B; //要給 partA 做下次計算\r\n                    ansString = ans.toString();\r\n                    \r\n                    //將算出的數字給到一個新的陣列\r\n                    \r\n                    for (let i = 0; i < ansString.length; i++) {\r\n                        newArray.push(ansString.slice(i, i + 1));\r\n                    }\r\n                    comma = toThousands(newArray.join(''))\r\n                \r\n                    this.setState({\r\n                        answerArray: comma,\r\n                        symbol: Cal,\r\n                        partA: ans,\r\n                        \r\n                    });\r\n                    break;\r\n                case 3:\r\n                    ans = A * B; //要給 partA 做下次計算\r\n                    ansString = ans.toString();\r\n                    \r\n                    //將算出的數字給到一個新的陣列\r\n                    \r\n                    for (let i = 0; i < ansString.length; i++) {\r\n                        newArray.push(ansString.slice(i, i + 1));\r\n                    }\r\n                    comma = toThousands(newArray.join(''))\r\n                \r\n                    this.setState({\r\n                        answerArray: comma,\r\n                        symbol: Cal,\r\n                        partA: ans,\r\n                        \r\n                    });\r\n                    break;\r\n                case 4:\r\n                    ans = A / B; //要給 partA 做下次計算\r\n                    ansString = ans.toString();\r\n                    \r\n                    //將算出的數字給到一個新的陣列\r\n                    \r\n                    for (let i = 0; i < ansString.length; i++) {\r\n                        newArray.push(ansString.slice(i, i + 1));\r\n                    }\r\n                    comma = toThousands(newArray.join(''))\r\n                \r\n                    this.setState({\r\n                        answerArray: comma,\r\n                        symbol: Cal,\r\n                        partA: ans,\r\n                        \r\n                    });\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n            \r\n                \r\n            \r\n        let clear = this.state.answerArray.filter((value) => {\r\n            return value !== ',';\r\n        })\r\n    \r\n        //將陣列轉換為字串 再將字串轉換為數值\r\n        let toStr = clear.join('');\r\n        let toInt = parseInt(toStr);\r\n        \r\n\r\n        this.setState({\r\n            partB: toInt,\r\n\r\n        },calculation)\r\n            \r\n\r\n        \r\n    }\r\n\r\n    \r\n\r\n    //+ 號 click\r\n    addClick = () =>{\r\n       \r\n        if(this.state.partA === null){\r\n            \r\n            //找出沒有逗號的陣列\r\n            let clear = this.state.answerArray.filter((value) => {\r\n                return value !== ',';\r\n            })\r\n           \r\n            //將陣列轉換為字串 再將字串轉換為數值\r\n            let toStr = clear.join('');\r\n            let toInt = parseInt(toStr);\r\n           \r\n            this.setState({\r\n                partA: toInt,\r\n                calculate: true,\r\n                symbol: 1,\r\n            })\r\n        }else if(this.state.partA !== null && this.state.partB === null){\r\n            //將 answerArray 轉給 partB\r\n            //找出沒有逗號的陣列\r\n            let clear = this.state.answerArray.filter((value) => {\r\n                return value !== ',';\r\n            })\r\n        \r\n            //將陣列轉換為字串 再將字串轉換為數值\r\n            let toStr = clear.join('');\r\n            let toInt = parseInt(toStr);\r\n            \r\n\r\n            this.setState({\r\n                partB: toInt,\r\n                calculate: true,\r\n                symbol: 1,\r\n                \r\n            },()=>{\r\n                this.equalClick(1)\r\n            })\r\n        }else if(this.state.symbol === 5){\r\n            let clear = this.state.answerArray.filter((value) => {\r\n                return value !== ',';\r\n            })\r\n        \r\n            //將陣列轉換為字串 再將字串轉換為數值\r\n            let toStr = clear.join('');\r\n            let toInt = parseInt(toStr);\r\n            this.setState({\r\n                partB: toInt,\r\n                calculate: true,\r\n                symbol:1,\r\n                \r\n            })\r\n        }else if(this.state.partA !== null && this.state.partB !== null){\r\n            let clear = this.state.answerArray.filter((value) => {\r\n                return value !== ',';\r\n            })\r\n        \r\n            //將陣列轉換為字串 再將字串轉換為數值\r\n            let toStr = clear.join('');\r\n            let toInt = parseInt(toStr);\r\n            this.setState({\r\n                partB: toInt,\r\n                calculate: true,\r\n                symbol:1,\r\n                \r\n            },()=>{\r\n                this.equalClick(1);\r\n\r\n            })\r\n          \r\n        }\r\n    }\r\n    // - 號 click\r\n    subtractClick = () =>{\r\n        if(this.state.partA === null){\r\n            \r\n            //找出沒有逗號的陣列\r\n            let clear = this.state.answerArray.filter((value) => {\r\n                return value !== ',';\r\n            })\r\n           \r\n            //將陣列轉換為字串 再將字串轉換為數值\r\n            let toStr = clear.join('');\r\n            let toInt = parseInt(toStr);\r\n           \r\n            this.setState({\r\n                partA: toInt,\r\n                calculate: true,\r\n                symbol: 2,\r\n            })\r\n        }else if(this.state.partA !== null && this.state.partB === null){\r\n            //將 answerArray 轉給 partB\r\n            //找出沒有逗號的陣列\r\n            let clear = this.state.answerArray.filter((value) => {\r\n                return value !== ',';\r\n            })\r\n        \r\n            //將陣列轉換為字串 再將字串轉換為數值\r\n            let toStr = clear.join('');\r\n            let toInt = parseInt(toStr);\r\n            \r\n\r\n            this.setState({\r\n                partB: toInt,\r\n                calculate: true,\r\n                symbol: 2,\r\n                \r\n            },()=>{\r\n                this.equalClick(2)\r\n            })\r\n        }else if(this.state.symbol === 5){\r\n            let clear = this.state.answerArray.filter((value) => {\r\n                return value !== ',';\r\n            })\r\n        \r\n            //將陣列轉換為字串 再將字串轉換為數值\r\n            let toStr = clear.join('');\r\n            let toInt = parseInt(toStr);\r\n            this.setState({\r\n                partB: toInt,\r\n                calculate: true,\r\n                symbol:2,\r\n                \r\n            })\r\n        }else if(this.state.partA !== null && this.state.partB !== null){\r\n            let clear = this.state.answerArray.filter((value) => {\r\n                return value !== ',';\r\n            })\r\n        \r\n            //將陣列轉換為字串 再將字串轉換為數值\r\n            let toStr = clear.join('');\r\n            let toInt = parseInt(toStr);\r\n            this.setState({\r\n                partB: toInt,\r\n                calculate: true,\r\n                symbol:2,\r\n                \r\n            },()=>{\r\n                this.equalClick(2);\r\n\r\n            })\r\n          \r\n        }\r\n    }\r\n\r\n    // * 號 click\r\n    multiplication = ()=>{\r\n        if(this.state.partA === null){\r\n            \r\n            //找出沒有逗號的陣列\r\n            let clear = this.state.answerArray.filter((value) => {\r\n                return value !== ',';\r\n            })\r\n           \r\n            //將陣列轉換為字串 再將字串轉換為數值\r\n            let toStr = clear.join('');\r\n            let toInt = parseInt(toStr);\r\n           \r\n            this.setState({\r\n                partA: toInt,\r\n                calculate: true,\r\n                symbol: 3,\r\n            })\r\n        }else if(this.state.partA !== null && this.state.partB === null){\r\n            //將 answerArray 轉給 partB\r\n            //找出沒有逗號的陣列\r\n            let clear = this.state.answerArray.filter((value) => {\r\n                return value !== ',';\r\n            })\r\n        \r\n            //將陣列轉換為字串 再將字串轉換為數值\r\n            let toStr = clear.join('');\r\n            let toInt = parseInt(toStr);\r\n            \r\n\r\n            this.setState({\r\n                partB: toInt,\r\n                calculate: true,\r\n                symbol: 3,\r\n                \r\n            },()=>{\r\n                this.equalClick(3)\r\n            })\r\n        }else if(this.state.symbol === 5){\r\n            let clear = this.state.answerArray.filter((value) => {\r\n                return value !== ',';\r\n            })\r\n        \r\n            //將陣列轉換為字串 再將字串轉換為數值\r\n            let toStr = clear.join('');\r\n            let toInt = parseInt(toStr);\r\n            this.setState({\r\n                partB: toInt,\r\n                calculate: true,\r\n                symbol:3,\r\n                \r\n            })\r\n        }else if(this.state.partA !== null && this.state.partB !== null){\r\n            let clear = this.state.answerArray.filter((value) => {\r\n                return value !== ',';\r\n            })\r\n        \r\n            //將陣列轉換為字串 再將字串轉換為數值\r\n            let toStr = clear.join('');\r\n            let toInt = parseInt(toStr);\r\n            this.setState({\r\n                partB: toInt,\r\n                calculate: true,\r\n                symbol:3,\r\n                \r\n            },()=>{\r\n                this.equalClick(3);\r\n\r\n            })\r\n          \r\n        }\r\n    \r\n    }\r\n    division = () => {\r\n        if(this.state.partA === null){\r\n            \r\n            //找出沒有逗號的陣列\r\n            let clear = this.state.answerArray.filter((value) => {\r\n                return value !== ',';\r\n            })\r\n           \r\n            //將陣列轉換為字串 再將字串轉換為數值\r\n            let toStr = clear.join('');\r\n            let toInt = parseInt(toStr);\r\n           \r\n            this.setState({\r\n                partA: toInt,\r\n                calculate: true,\r\n                symbol: 4,\r\n            })\r\n        }else if(this.state.partA !== null && this.state.partB === null){\r\n            //將 answerArray 轉給 partB\r\n            //找出沒有逗號的陣列\r\n            let clear = this.state.answerArray.filter((value) => {\r\n                return value !== ',';\r\n            })\r\n        \r\n            //將陣列轉換為字串 再將字串轉換為數值\r\n            let toStr = clear.join('');\r\n            let toInt = parseInt(toStr);\r\n            \r\n\r\n            this.setState({\r\n                partB: toInt,\r\n                calculate: true,\r\n                symbol: 4,\r\n                \r\n            },()=>{\r\n                this.equalClick(4)\r\n            })\r\n        }else if(this.state.symbol === 5){\r\n            let clear = this.state.answerArray.filter((value) => {\r\n                return value !== ',';\r\n            })\r\n        \r\n            //將陣列轉換為字串 再將字串轉換為數值\r\n            let toStr = clear.join('');\r\n            let toInt = parseInt(toStr);\r\n            this.setState({\r\n                partB: toInt,\r\n                calculate: true,\r\n                symbol:4,\r\n                \r\n            })\r\n        }else if(this.state.partA !== null && this.state.partB !== null){\r\n            let clear = this.state.answerArray.filter((value) => {\r\n                return value !== ',';\r\n            })\r\n        \r\n            //將陣列轉換為字串 再將字串轉換為數值\r\n            let toStr = clear.join('');\r\n            let toInt = parseInt(toStr);\r\n            this.setState({\r\n                partB: toInt,\r\n                calculate: true,\r\n                symbol:4,\r\n                \r\n            },()=>{\r\n                this.equalClick(4);\r\n\r\n            })\r\n          \r\n        }\r\n    }\r\n    clear = () =>{\r\n        this.setState({\r\n            answerArray:[\"0\"],\r\n            calculationArray:[],\r\n            partA: null, //String\r\n            partB: null, //String\r\n            answer: 0,\r\n            symbol: 0, //  0 => null , 1 => + , 2 => - , 3 => X , 4 => 5 => =\r\n            calculate: false,\r\n            dot: false,\r\n        })\r\n    }\r\n    delete = () =>{\r\n        let last = this.state.answerArray.length\r\n        let del = this.state.answerArray.splice(last-1,1);\r\n        this.setState({\r\n            answerArray: del,\r\n        })\r\n    }\r\n   \r\n}\r\n\r\n// 加入逗號\r\nfunction toThousands(num){\r\n    let result = [ ], counter = 0;\r\n    num = (num || 0).split('');\r\n    for (let i = num.length - 1; i >= 0; i--) {\r\n        counter++;\r\n        result.unshift(num[i]);\r\n        if (!(counter % 3) && i != 0) { result.unshift(','); }\r\n    }\r\nreturn result;\r\n}\r\n\r\nexport {Calculator};\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Route, browserHistory,IndexRoute,Router } from 'react-router-dom';\nimport { Home} from './pages';\nimport { MultiplicationChart} from './1F_9X9/index';\nimport { Calculator} from './3F_Calculator/index';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n      {/* The corresponding component will show here if the current URL matches the path */}\n      {/* <Route path={process.env.PUBLIC_URL + '/'} exact component={Home} /> */}\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/MultiplicationChart\" component={MultiplicationChart} />\n        <Route path=\"/Calculator\" component={Calculator} />\n      \n    </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter, Switch } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n      \n        <App />\n      \n  </HashRouter>,\n    document.getElementById('root')\n  );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}